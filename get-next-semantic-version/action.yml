name: Get next semantic version
description: |
  Calculate the next semantic version 

  This action calculates the next semantic version based on labels of pull-requests merged between the latest git tag and the current SHA
  It needs the checkout action to run first because it uses git log for calculating time range
inputs:
  token:
    description: 'A Github PAT'
    required: true
  git_default_branch:
    description: 'Default git branch'
    required: false
    default: "master"
outputs:
  version:
    description: "Git base branch"
    value: ${{ steps.version_check.outputs.version }}
  previous_version:
    description: "Previous tagged version"
    value: ${{ steps.tag_info.outputs.last_tag }}
  next_version:
    description: "Next version tag name"
    value: ${{ steps.calcaulate-version.outputs.next_version }}
  continue_release:
    description: "true if it is ok to continue the release process"
    value: ${{ steps.version_check.outputs.continue_release }}
runs:
  using: "composite"
  steps:
    - name: Calculate PR filters
      id: tag_info
      shell: bash
      run: |
        last_tag_commit="$(git log -1 --exclude="*alpha*" --tags --no-walk --pretty="format:%H")"
        last_tag="$(git describe --tags --abbrev=0 "$last_tag_commit")"
        last_tag_date="$(git log -1 --exclude="*alpha*" --no-walk --pretty="format:%cI" "$last_tag_commit")"
        start_date=$(date -Is -d "$last_tag_date")
        {
          echo "start_date=$start_date"
          echo "last_tag=$last_tag"
          echo "last_tag_commit=$last_tag_commit"
        } >> "$GITHUB_OUTPUT"
        cat "$GITHUB_OUTPUT"
    - name: Get PR labels
      uses: octokit/graphql-action@v2.x
      id: get_latest_prs
      with:
        query: |
          query($filter:String!) {
            search(query:$filter, type: ISSUE, last: 100) {
              edges {
                node {
                  ... on PullRequest {
                    number
                    mergedAt
                    labels (first: 100) {
                      nodes {
                        name
                      }
                    }
                    mergeCommit {
                      oid
                    }
                  }
                }
              }
            }
          }
        filter: repo:${{ github.repository }} is:pr base:${{ inputs.git_default_branch }} merged:>${{ steps.tag_info.outputs.start_date }}
      env:
        GITHUB_TOKEN: "${{ inputs.token }}"
    - name: Get version being bumped
      id: version_check
      env:
        PR_DATA: "${{ steps.get_latest_prs.outputs.data }}"
        LAST_TAG_COMMIT: "${{ steps.tag_info.outputs.last_tag_commit }}"
      shell: bash
      run: |
        "${GITHUB_ACTION_PATH}/process-latest-prs.sh"
    - name: Show version being bumped
      if: steps.version_check.outputs.continue_release == 'true'
      shell: bash
      run: echo "Based on tags, we're updating ${{ steps.version_check.outputs.VERSION }} version!"

    - name: Calculate version
      id: calcaulate-version
      shell: bash
      env:
        BUMP: ${{ steps.version_check.outputs.VERSION }}
        PREVIOUS_VERSION: ${{ steps.tag_info.outputs.last_tag }}
      run: |
        NEXT_VERSION="$("${GITHUB_ACTION_PATH}/calculate-version.sh" "$BUMP" "$PREVIOUS_VERSION")"
        echo "next_version=$NEXT_VERSION" >> "$GITHUB_OUTPUT"
        cat "$GITHUB_OUTPUT"
