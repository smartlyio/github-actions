name: Get next semantic version
description: |
  Calculate the next semantic version 

  This action calculates the next semantic version based on labels of pull-requests merged between the latest git tag and the current SHA
  It needs the checkout action to run first because it uses git log for calculating time range
inputs:
  token:
    description: 'A Github PAT'
    required: true
outputs:
  version:
    description: "Git base branch"
    value: ${{ steps.version_check.outputs.version }}
  continue_release:
    description: "true if it is ok to continue the release process"
    value: ${{ steps.version_check.outputs.continue_release }}
runs:
  using: "composite"
  steps:
    - name: Get base branch
      id: get_base_branch
      uses: "smartlyio/github-actions/get-base-branch@VULCAN-2557/init-public-actions"
      with:
        token: "${{ inputs.token }}"
    - name: Calculate PR filters
      id: filters
      shell: bash
      run: |
        last_tag_date=$(git log -1 --tags --no-walk --pretty="format:%%cI")
        start_date=$(date -Is -d "$last_tag_date")
        echo ::set-output name=start_date::"$start_date"
    - name: Get PR labels
      uses: octokit/graphql-action@v2.x
      id: get_latest_prs
      with:
        query: |
          query($filter:String!) {
            search(query:$filter, type: ISSUE, last: 100) {
              edges {
                node {
                  ... on PullRequest {
                    number
                    mergedAt
                    labels (first: 100) {
                      nodes {
                        name
                      }
                    }
                  }
                }
              }
            }
          }
        filter: repo:${{ github.repository }} is:pr base:${{ steps.get_base_branch.outputs.git_base_branch }} merged:>${{ steps.filters.outputs.start_date }}
      env:
        GITHUB_TOKEN: "${{ inputs.token }}"
    - name: Get version being bumped
      id: version_check
      env:
        PR_DATA: "${{ steps.get_latest_prs.outputs.data }}"
      shell: bash
      run: |
        echo "$PR_DATA"
        version=$(echo "$PR_DATA" | grep -m1 -oi major || echo "$PR_DATA" | grep -m1 -oi minor || echo "$PR_DATA" | grep -m1 -oi patch || echo "")
        version_lower=${version,,}
        echo ::set-output name=version::"$version_lower"
        if [ -z "$version" ]; then
          echo ::set-output name=continue_release::false
        else
          echo ::set-output name=continue_release::true
        fi
    - name: Show version being bumped
      if: steps.version_check.outputs.continue_release == 'true'
      shell: bash
      run: echo "Based on tags, we're updating ${{ steps.version_check.outputs.VERSION }} version!"